// Code generated by juaz. DO NOT EDIT.
// versions: v1.0.1
// source: user.juaz

package user

import (
	"context"
	"net/http"
	"time"
	"fmt"
	"net/url"

	"github.com/isaqueveras/juazeiro"
)

// Level defines the level enum type
type Level string

const (
	LevelAdmin	Level = "ADMIN"
	LevelUser	Level = "USER"
	LevelEmployee	Level = "EMPLOYEE"
)

// String convert level type to string
func (t Level) String() string {
	return string(t)
}

// Empty data model for the empty structure
type Empty struct {
}

// UserParams data model for the user_params structure
type UserParams struct {
	Limit *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
	Total *bool `json:"total,omitempty"`
	Tickets []*int64 `json:"tickets,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// User data model for the user structure
type User struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Level *Level `json:"level,omitempty"`
	parameters *UserParams
}

// ParamLimit ...
func (u *User) ParamLimit(limit *int) {
	if u.parameters == nil {
		u.parameters = &UserParams{}
	}
	u.parameters.Limit = limit
}

// ParamOffset ...
func (u *User) ParamOffset(offset *int) {
	if u.parameters == nil {
		u.parameters = &UserParams{}
	}
	u.parameters.Offset = offset
}

// ParamTotal ...
func (u *User) ParamTotal(total *bool) {
	if u.parameters == nil {
		u.parameters = &UserParams{}
	}
	u.parameters.Total = total
}

// ParamTickets ...
func (u *User) ParamTickets(tickets []*int64) {
	if u.parameters == nil {
		u.parameters = &UserParams{}
	}
	u.parameters.Tickets = tickets
}

// ParamCreatedAt ...
func (u *User) ParamCreatedAt(createdAt *time.Time) {
	if u.parameters == nil {
		u.parameters = &UserParams{}
	}
	u.parameters.CreatedAt = createdAt
}

// IUserClient defines the interface of the provided methods
type IUserClient interface {
	GetUser(context.Context, *User) (*User, error)
	CreateUser(context.Context, *User) error
	EditUser(context.Context, *User) error
	DeleteUser(context.Context, *Empty) error
}

type UserClient struct {
	cc juazeiro.ClientConnInterface
}

func NewUserClient(cc juazeiro.ClientConnInterface) IUserClient {
	return &UserClient{cc: cc}
}

// GetUser implements the get_user method of the interface
func (c *UserClient) GetUser(ctx context.Context, in *User) (*User, error) {
	out := new(User)
	uri := fmt.Sprintf("/v1/user/%v", *in.Id)
	if in.parameters != nil {
		uri += _build_user_params_parameters(in.parameters)
		in.parameters = nil
	}
	err := c.cc.Invoke(ctx, http.MethodGet, uri, http.StatusOK, in, out)
	return out, err
}

// CreateUser implements the create_user method of the interface
func (c *UserClient) CreateUser(ctx context.Context, in *User) error {
	uri := fmt.Sprintf("/v1/account/user/%v/create", *in.Id)
	if in.parameters != nil {
		uri += _build_user_params_parameters(in.parameters)
		in.parameters = nil
	}
	return c.cc.Invoke(ctx, http.MethodPost, uri, http.StatusCreated, in, in)
}

// EditUser implements the edit_user method of the interface
func (c *UserClient) EditUser(ctx context.Context, in *User) error {
	uri := fmt.Sprintf("/v1/account/user/%v/edit", *in.Id)
	if in.parameters != nil {
		uri += _build_user_params_parameters(in.parameters)
		in.parameters = nil
	}
	return c.cc.Invoke(ctx, http.MethodPut, uri, http.StatusNoContent, in, in)
}

// DeleteUser implements the delete_user method of the interface
func (c *UserClient) DeleteUser(ctx context.Context, in *Empty) error {
	uri := "/v1/account/user/delete"
	return c.cc.Invoke(ctx, http.MethodDelete, uri, http.StatusNoContent, in, in)
}

func _build_user_params_parameters(in *UserParams) string {
	val := &url.Values{}
	if in.Limit != nil {
		val.Add("limit", fmt.Sprintf("%v", *in.Limit))
	}
	if in.Offset != nil {
		val.Add("offset", fmt.Sprintf("%v", *in.Offset))
	}
	if in.Total != nil {
		val.Add("total", fmt.Sprintf("%v", *in.Total))
	}
	for _, value := range in.Tickets {
		if value == nil {
			continue
		}
		val.Add("tickets", fmt.Sprintf("%v", *value))
	}
	if in.CreatedAt != nil {
		val.Add("created_at", fmt.Sprintf("%v", *in.CreatedAt))
	}
	return "?" + val.Encode()
}
