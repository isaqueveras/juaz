// Code generated by juaz. DO NOT EDIT.
// versions: v1.0.1
// source: biometry.juaz

package biometry

import (
	"context"
	"net/http"
	"fmt"
	"net/url"

	"github.com/isaqueveras/juazeiro"
)

// State defines the state enum type
type State string

const (
	StateDone	State = "DONE"
	StateCanceled	State = "CANCELED"
	StateUnderAnalysis	State = "UNDER_ANALYSIS"
)

// String convert state type to string
func (t State) String() string {
	return string(t)
}

// Flow defines the flow enum type
type Flow string

const (
	FlowChangeAddress	Flow = "CHANGE_ADDRESS"
	FlowChangeOwnership	Flow = "CHANGE_OWNERSHIP"
	FlowChangePlan	Flow = "CHANGE_PLAN"
)

// String convert flow type to string
func (t Flow) String() string {
	return string(t)
}

// Biometry data model for the biometry structure
type Biometry struct {
	Id *int64 `json:"id,omitempty"`
	Document *string `json:"document,omitempty"`
	Flow *Flow `json:"flow,omitempty"`
	State *State `json:"state,omitempty"`
}

// Identifier data model for the identifier structure
type Identifier struct {
	Id *string `json:"id,omitempty"`
}

// BiometryParams data model for the biometry_params structure
type BiometryParams struct {
	Id *string `json:"id,omitempty"`
	Document *string `json:"document,omitempty"`
}

// SearchParams data model for the search_params structure
type SearchParams struct {
	RequestId *string `json:"request_id,omitempty"`
	parameters *BiometryParams
}

// ParamId ...
func (s *SearchParams) ParamId(id *string) {
	if s.parameters == nil {
		s.parameters = &BiometryParams{}
	}
	s.parameters.Id = id
}

// ParamDocument ...
func (s *SearchParams) ParamDocument(document *string) {
	if s.parameters == nil {
		s.parameters = &BiometryParams{}
	}
	s.parameters.Document = document
}

// IBiometryClient defines the interface of the provided methods
type IBiometryClient interface {
	Create(context.Context, *Biometry) (*Identifier, error)
	Get(context.Context, *Biometry) error
	Search(context.Context, *SearchParams) (*[]Biometry, error)
}

type BiometryClient struct {
	cc juazeiro.ClientConnInterface
}

func NewBiometryClient(cc juazeiro.ClientConnInterface) IBiometryClient {
	return &BiometryClient{cc: cc}
}

// Create implements the create method of the interface
func (c *BiometryClient) Create(ctx context.Context, in *Biometry) (*Identifier, error) {
	out := new(Identifier)
	uri := "/v1/biometry/create"
	err := c.cc.Invoke(ctx, http.MethodPost, uri, http.StatusCreated, in, out)
	return out, err
}

// Get implements the get method of the interface
func (c *BiometryClient) Get(ctx context.Context, in *Biometry) error {
	uri := fmt.Sprintf("/v1/biometry/obtain/%v", *in.Id)
	return c.cc.Invoke(ctx, http.MethodGet, uri, http.StatusOK, in, in)
}

// Search implements the search method of the interface
func (c *BiometryClient) Search(ctx context.Context, in *SearchParams) (*[]Biometry, error) {
	out := new([]Biometry)
	uri := "/v1/biometry/search"
	if in.parameters != nil {
		uri += _build_biometry_params_parameters(in.parameters)
		in.parameters = nil
	}
	err := c.cc.Invoke(ctx, http.MethodGet, uri, http.StatusOK, in, out)
	return out, err
}

func _build_biometry_params_parameters(in *BiometryParams) string {
	val := &url.Values{}
	if in.Id != nil {
		val.Add("id", fmt.Sprintf("%v", *in.Id))
	}
	if in.Document != nil {
		val.Add("document", fmt.Sprintf("%v", *in.Document))
	}
	return "?" + val.Encode()
}
