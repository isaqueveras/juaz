package golang

import (
	"fmt"
	"os"
	"path"
	"strings"

	"github.com/isaqueveras/juaz/grammar"
)

var VERSION = "v0.0.0-under-construction"

var imports = []string{
	"context",
	"net/http",
}

func Write(juaz *grammar.Juaz) string {
	if len(juaz.Entries) == 0 {
		fmt.Fprintf(os.Stderr, "juaz: nothing to read in the file\n\nFile: %s\n", juaz.Pos.Filename)
		os.Exit(2)
	}

	if juaz.Entries[0].Package == "" {
		panic("syntax err" + juaz.Entries[0].Pos.String())
	}

	var buf strings.Builder
	buf.WriteString("// Code generated by juaz. DO NOT EDIT.\n")
	buf.WriteString("// versions: " + VERSION + "\n")
	buf.WriteString("// source: " + path.Base(juaz.Pos.Filename) + "\n\n")

	pkg := juaz.Entries[0].Package
	if pkg != "" {
		buf.WriteString("package " + pkg + "\n\n")
	}

	var importTime bool
	for _, entry := range juaz.Entries {
		if entry.Node != nil && !importTime {
			for _, field := range entry.Node.Entries {
				if field.Field.Type.Scalar != 0 && field.Field.Type.Scalar == grammar.Time {
					imports = append(imports, "time")
					importTime = true
				}
			}
		}
	}

	bufTypes := _build_type(juaz)
	bufModel := _build_model(juaz)
	bufInterfaceMethods := _build_interface_methods(juaz)
	bufStructClient := _build_struct_client(juaz)
	bufFuncNewClient := _build_func_new_client(juaz)
	bufImplementMethod := _build_implement_method(juaz)
	bufImports := _build_import()

	buf.WriteString(bufImports)
	buf.WriteString(bufTypes)
	buf.WriteString(bufModel)
	buf.WriteString(bufInterfaceMethods)
	buf.WriteString(bufStructClient)
	buf.WriteString(bufFuncNewClient)
	buf.WriteString(bufImplementMethod)

	var bufParameters string
	for _, params := range _build_parameters(juaz) {
		bufParameters += params.buf
	}

	buf.WriteString(bufParameters)

	return buf.String()
}
